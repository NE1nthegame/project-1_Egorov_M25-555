# labyrinth_game/main.py

"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –∏–≥—Ä—ã '–õ–∞–±–∏—Ä–∏–Ω—Ç —Å–æ–∫—Ä–æ–≤–∏—â'.
–°–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞, –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥.
"""

from labyrinth_game.constant import COMMANDS, ROOMS
from labyrinth_game.player_actions import (
    get_input,
    move_player,
    show_inventory,
    take_item,
    use_item,
)
from labyrinth_game.utils import (
    attempt_open_treasure,
    describe_current_room,
    show_help,
    solve_puzzle,
)

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
game_state = {
    "player_inventory": [],  # –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–≥—Ä–æ–∫–∞
    "current_room": "entrance",  # –¢–µ–∫—É—â–∞—è –∫–æ–º–Ω–∞—Ç–∞
    "game_over": False,  # –§–ª–∞–≥ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    "steps_taken": 0,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
}


def process_command(game_state, command):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É, –≤–≤–µ–¥–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

    Args:
        game_state (dict): –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        command (str): –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    parts = command.split()
    if not parts:
        return

    cmd = parts[0]
    arg = parts[1] if len(parts) > 1 else None

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ—Å–ª–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–≤–∏–∂–µ–Ω–∏—è
    if cmd in ["north", "south", "east", "west"]:
        move_player(game_state, cmd)
        return

    match cmd:
        case "look":
            describe_current_room(game_state)
        case "go":
            if arg:
                move_player(game_state, arg)
            else:
                print("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (north, south, east, west)")
        case "take":
            if arg:
                if arg == "treasure_chest":
                    print("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–Ω—è—Ç—å —Å—É–Ω–¥—É–∫, –æ–Ω —Å–ª–∏—à–∫–æ–º —Ç—è–∂–µ–ª—ã–π.")
                else:
                    take_item(game_state, arg)
            else:
                print("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –≤–∑—è—Ç–∏—è")
        case "use":
            if arg:
                use_item(game_state, arg)
            else:
                print("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
        case "inventory":
            show_inventory(game_state)
        case "solve":
            if game_state["current_room"] == "treasure_room":
                attempt_open_treasure(game_state)
            else:
                solve_puzzle(game_state)
        case "help":
            show_help(COMMANDS)
        case "quit" | "exit":
            print("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!")
            game_state["game_over"] = True
        case _:
            print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–≥—Ä—ã. –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª.
    """
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    print("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –õ–∞–±–∏—Ä–∏–Ω—Ç —Å–æ–∫—Ä–æ–≤–∏—â!")

    # –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
    describe_current_room(game_state)

    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
    while not game_state["game_over"]:
        # –°—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        command = get_input("\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å? ")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        process_command(game_state, command)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –ø–æ–±–µ–¥—ã
        if (
            game_state["current_room"] == "treasure_room"
            and "treasure_chest" not in ROOMS["treasure_room"]["items"]
        ):
            print("\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –Ω–∞—à–ª–∏ —Å–æ–∫—Ä–æ–≤–∏—â–µ –∏ –ø–æ–±–µ–¥–∏–ª–∏! üéâ")
            print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤: {game_state['steps_taken']}")
            game_state["game_over"] = True


# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ main()
if __name__ == "__main__":
    main()
